{"version":3,"sources":["components/ReadOnlyRow.tsx","components/MutableRow.tsx","components/WelcomeMessage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ReadOnlyRow","cour","setCurrentCourseID","handleEditClick","handleDeleteClick","onClick","ID","School","ClassID","CourseName","Desc","Credits","className","type","event","MutableRow","editCourseData","handleEditCourseChange","handleCancelClick","required","placeholder","name","value","onChange","customModal","content","background","top","left","right","bottom","marginRight","transform","WriteMessage","closeModal","App","LOCAL_STORAGE_PLAN","INITIAL_PLAN","SemesterName","Courses","useState","rawPlan","localStorage","getItem","JSON","parse","load","plan","setPlan","currentSemesterID","setCurrentSemesterID","currentCourseID","modalOpen","setOpen","semNum","setSemNum","addCourseData","setAddFormData","setEditCourseData","preventDefault","fieldName","target","fieldValue","newCourseData","courseValues","handleEditCourseSubmit","newPlan","map","inner","semIndex","findIndex","semester","editedCourse","courseIndex","course","handleAddCourseChange","courIndex","splice","isOpen","onRequestClose","contentLabel","style","window","location","reload","newSemester","nanoid","addSemester","length","clearSemesters","setItem","stringify","alert","Accordion","flush","sem","Item","eventKey","Header","Body","onSubmit","clearClasses","index","deleteSemester","newCourse","push","defaultValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.add3d268.chunk.js","sourcesContent":["import React from \"react\";\nimport { Course } from \"./course\";\nimport \"../App.css\";\nimport \"../App.tsx\";\n\nconst ReadOnlyRow = ({ cour, setCurrentCourseID, handleEditClick, handleDeleteClick }:\n    {cour: Course , setCurrentCourseID: (value: React.SetStateAction<string>) => void, handleEditClick: (event: React.MouseEvent, cour: Course) => void, handleDeleteClick: (event: React.MouseEvent, cour: Course) => void}) : JSX.Element => {\n    return( \n        <tr key= {cour.ID} onClick= {() => setCurrentCourseID(cour.ID)}>\n            <td>{cour.School}</td>\n            <td>{cour.ClassID}</td>\n            <td>{cour.CourseName}</td>\n            <td>{cour.Desc}</td>\n            <td>{cour.Credits}</td>\n            <td>\n                <button className= \"edit-class\" type= \"button\" onClick={(event) => handleEditClick(event, cour)}></button>\n                <button className= \"delete-class\" type= \"button\" onClick={(event)=> handleDeleteClick(event, cour)}></button>\n            </td>\n        </tr> \n    );\n};\n\nexport default ReadOnlyRow;","import React from \"react\";\nimport { Course } from \"./course\";\nimport \"../App.css\";\n\nconst MutableRow = ({editCourseData, handleEditCourseChange, handleCancelClick}: \n    {editCourseData: Course , handleEditCourseChange: (event: React.ChangeEvent<HTMLInputElement>) => void, handleCancelClick: () => void}) : JSX.Element => {\n    return (\n        <tr>\n            <td>\n                <input\n                    type= \"text\"\n                    required = {true}\n                    placeholder= \"Enter School\"\n                    name = \"School\"\n                    value = {editCourseData.School}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>                \n                <input\n                    type= \"number\"\n                    required = {true}\n                    placeholder= \"Enter Course ID\"\n                    name = \"ClassID\"\n                    value = {editCourseData.ClassID}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>\n                <input\n                    type= \"text\"\n                    required = {true}\n                    placeholder= \"Enter Course Name\"\n                    name = \"CourseName\"\n                    value = {editCourseData.CourseName}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>\n                <input\n                    type= \"text\"\n                    required = {true}\n                    placeholder= \"Enter Desc\"\n                    name = \"Desc\"\n                    value = {editCourseData.Desc}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>\n                <input\n                    type= \"number\"\n                    required = {true}\n                    placeholder= \"Enter Credit Amount\"\n                    name = \"Credits\"\n                    value = {editCourseData.Credits}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>\n                <button className= \"save-class\" type= \"submit\"></button>\n                <button className= \"cancel-class\" type= \"button\" onClick={handleCancelClick}></button>\n            </td>\n        </tr>\n    );\n};\n\nexport default MutableRow;","import React from \"react\";\nimport \"../App.css\";\n\nexport const customModal = {\n    content: {\n        background: \"white\",\n        top: \"50%\",\n        left: \"50%\",\n        right: \"auto\",\n        bottom: \"auto\",\n        marginRight: \"-50%\",\n        transform: \"translate(-50%, -50%)\",\n    },\n};\n\nexport const WriteMessage = ({closeModal}: {closeModal: VoidFunction}): JSX.Element => {\n    return <div className=\"welcome-message\">\n        <h2 className= \"welcome-message-header\">Welcome to the UDEL Plan Creater!</h2>\n        <p className = \"welcome-message-body\">\n            This is where you can create your course plan for each semester of college.<br />\n            On this site you will be able to visualize your entire college career. <br />\n        </p>\n        <p>\n            Features are:\n            <ul>\n                <li>Students can add or delete a class in a semester</li>\n                <li>Students can add or delete a semester of there plan</li>\n                <li>Students are able to see an entire course list</li>\n                <li>Students can read the description of the course</li>\n            </ul>\n        </p>\n        <button className= \"modal-close\" onClick={closeModal}></button>\n    </div>;\n};","import React, { useState, Fragment } from \"react\";\nimport { Accordion } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport  Modal from \"react-modal\";\nimport { nanoid } from \"nanoid\";\nimport \"./App.css\";\nimport { Course } from \"./components/course\";\nimport { Semester } from \"./components/semester\";\nimport ReadOnlyRow from \"./components/ReadOnlyRow\";\nimport MutableRow from \"./components/MutableRow\";\nimport { WriteMessage } from \"./components/WelcomeMessage\";\nimport { customModal } from \"./components/WelcomeMessage\";\n//import courseData from \"./components/class-list.json\";\n//import semesterData from \"./components/semester-list.json\";\n//import { ProSidebar, Menu, SidebarHeader, SidebarFooter, SidebarContent } from \"react-pro-sidebar\";\n//import { loadSidebar } from \"./components/sidebar\";\n\n/* Resources that assisted in the making of this:\n1. Basis of the semester table: https://youtu.be/dYjdzpZv5yc\n2. NanoID description: https://www.npmjs.com/package/nanoid\n3. Modal: https://www.npmjs.com/package/react-modal\n*/\n\nconst App = () : JSX.Element => {\n    //Const Var\n    const LOCAL_STORAGE_PLAN = \"fouryearplanner_plan\";\n    const INITIAL_PLAN: Semester[] = [\n        { ID: \"0\", SemesterName: \"Semester 1\", Courses: [] }\n    ];\n    //Hooks\n    const [plan, setPlan] = useState<Semester[]>(load());\n    const [currentSemesterID, setCurrentSemesterID]= useState(\"\");\n    const [currentCourseID, setCurrentCourseID] = useState(\"\");\n    const [modalOpen, setOpen] = useState(true); // For welcome message\n    const [semNum, setSemNum] = useState(2);\n    const [addCourseData, setAddFormData] = useState<Course>({\n        ID: \"someid\",\n        School: \"Department\",\n        ClassID: 0,\n        CourseName: \"Course Name\",\n        Desc: \"Some Description\",\n        Credits: 0\n    });\n    const[editCourseData, setEditCourseData] = useState<Course>\n    ({\n        ID: \"\",\n        School: \"\",\n        ClassID: 0,\n        CourseName: \"\",\n        Desc: \"\",\n        Credits: 0\n    });\n\n    //Functions\n    const handleEditCourseChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault();\n\n        const fieldName = event.target.name;\n        const fieldValue = event.target.value;\n\n        const newCourseData = {...editCourseData, [fieldName]: fieldValue};\n\n        setEditCourseData(newCourseData);\n    };\n\n    const handleEditClick = (event: React.MouseEvent, cour: Course)=> {\n        event.preventDefault();\n\n        const courseValues = {\n            ID: currentCourseID,\n            School: cour.School,\n            ClassID: cour.ClassID,\n            CourseName: cour.CourseName,\n            Desc: cour.Desc,\n            Credits: cour.Credits\n        };\n\n        setEditCourseData(courseValues);\n        setCurrentCourseID(\"\");\n    };\n\n    const handleEditCourseSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const newPlan = plan.map(inner =>{ \n            return {...inner, Courses: [...inner.Courses]}; \n        });\n        const semIndex = plan.findIndex((semester: Semester) => semester.ID === currentSemesterID);\n\n        const editedCourse:Course = {\n            ID: currentCourseID,\n            School: editCourseData.School,\n            ClassID: editCourseData.ClassID,\n            CourseName: editCourseData.CourseName,\n            Desc: editCourseData.Desc,\n            Credits: editCourseData.Credits\n        };\n\n        const courseIndex = plan[semIndex].Courses.findIndex((course: Course)=> course.ID === currentCourseID);\n        newPlan[semIndex].Courses[courseIndex] = editedCourse;\n        setPlan(newPlan);\n        setCurrentCourseID(\"\");\n    };\n\n    const handleAddCourseChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault();\n\n        const fieldName = event.target.name;\n        const fieldValue = event.target.value;\n        const newCourseData = { ...addCourseData, [fieldName]: fieldValue};\n\n        setAddFormData(newCourseData);\n    };\n\n    const handleAddCourseSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const newPlan = plan.map(inner =>{ \n            return {...inner, Courses: [...inner.Courses]}; \n        });\n\n        const semIndex = plan.findIndex((semester: Semester) => semester.ID === currentSemesterID);\n        \n        const newCourse = {\n            ID: nanoid(),\n            School: addCourseData.School,\n            ClassID: addCourseData.ClassID,\n            CourseName: addCourseData.CourseName,\n            Desc: addCourseData.Desc,\n            Credits: addCourseData.Credits\n        };\n\n        newPlan[semIndex].Courses.push(newCourse);\n        setPlan(newPlan);\n        setCurrentCourseID(\"\");\n    };\n\n    const handleCancelClick = () => {\n        setCurrentCourseID(\"\");\n    };\n\n    const handleDeleteClick = (event: React.MouseEvent, cour: Course) => {\n        event.preventDefault();\n        const newPlan = plan.map(inner =>{ \n            return {...inner, Courses: [...inner.Courses]}; \n        });\n        const semIndex = plan.findIndex(semester => semester.ID === currentSemesterID);\n        const courIndex = plan[semIndex].Courses.findIndex(course => course.ID === cour.ID);\n\n\n        newPlan[semIndex].Courses.splice(courIndex, 1);        \n        setPlan(newPlan);\n        setCurrentCourseID(\"\");\n    };\n\n\n    const closeModal = () => {\n        setOpen(false);\n    };\n\n    const refreshPage = () => {\n        window.location.reload();\n    };\n\n    function addSemester(plan : Semester[]){\n        const newSemester ={\n            ID: nanoid(),\n            SemesterName: \"Semester\" + semNum,\n            Courses: []\n        };\n\n        setSemNum(semNum + 1);\n        setPlan([...plan, newSemester]);\n    }\n\n    function deleteSemester(plan : Semester[]){\n        const newPlan = plan.map(inner =>{ \n            return {...inner}; \n        });\n        const index = plan.findIndex((semester: Semester) => semester.ID === currentSemesterID);\n\n        //Note for later, add something in here that updates the other semester number when this is called\n\n        newPlan.splice(index, 1);\n        setPlan(newPlan);\n        setCurrentSemesterID(\"\");\n        setSemNum(semNum-1);\n    }\n\n    function clearSemesters(plan : Semester[]){\n        const newPlan = plan.map(inner =>{ \n            return {...inner}; \n        });\n        newPlan.splice(0, newPlan.length);\n        \n        setPlan(newPlan);\n        setCurrentSemesterID(\"\");\n        setSemNum(1);\n    }\n\n    function clearClasses(plan : Semester[]){\n        const newPlan = plan.map(inner =>{ \n            return {...inner}; \n        });\n        const index = plan.findIndex((semester: Semester) => semester.ID === currentSemesterID);\n        \n        newPlan[index].Courses = [];\n        setPlan(newPlan);\n        setCurrentCourseID(\"\");\n    }\n\n    function save(){ \n        localStorage.setItem(LOCAL_STORAGE_PLAN, JSON.stringify(plan));\n        alert(\"Plan saved! This plan will be loaded whenever you load back into this page.\");\n    }\n\n    function load() : Semester[] {\n        const rawPlan: string | null = localStorage.getItem(LOCAL_STORAGE_PLAN);\n        if (rawPlan === null) {\n            return [...INITIAL_PLAN];\n        } else {\n            return JSON.parse(rawPlan);\n        }\n    }\n\n    function clearSave(){\n        localStorage.setItem(LOCAL_STORAGE_PLAN, JSON.stringify(INITIAL_PLAN));\n        alert(\"Save cleared! Refresh your page to start again.\");\n    }\n\n    return(\n        <div className = \"App\">\n            <Modal\n                isOpen={modalOpen}\n                onRequestClose={closeModal}\n                contentLabel=\"Welcome Message\"\n                style={customModal}\n            >\n                <WriteMessage closeModal={closeModal}></WriteMessage>\n            </Modal>\n            <div className=\"row\">\n                <div className=\"col-8\">\n                    <h1 className=\"header\"><button className=\"refresh-logo\" onClick={refreshPage}></button> UD CIS Scheduler</h1>\n                    <br />\n                    <button className = \"edit-semester\" type = \"button\" \n                        onClick= {() => addSemester(plan)}>Add Semester</button>\n                    <button className = \"edit-semester\" type = \"button\" \n                        onClick= {() => clearSemesters(plan)}>Clear All Semesters</button>\n                    <button className = \"edit-semester\" type = \"button\" \n                        onClick= {() => save()}>Save Plan</button>\n                    <button className = \"edit-semester\" type = \"button\" \n                        onClick= {() => clearSave()}>Clear Current Save state</button>\n                    <br />\n                </div>\n            </div>\n            <Accordion flush>\n                { plan.map ( (sem: Semester) =>\n                    <Accordion.Item eventKey= {sem.ID}  key = {sem.ID}>\n                        <Accordion.Header onClick= {() => setCurrentSemesterID(sem.ID)}>{sem.SemesterName}</Accordion.Header>\n                        <Accordion.Body>\n                            <form onSubmit={handleEditCourseSubmit}>\n                                <table>\n                                    <thead>\n                                        <tr>\n                                            <th>School</th>\n                                            <th>ClassID</th>\n                                            <th>Course Name</th>\n                                            <th>Desc</th>\n                                            <th>Credits</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        { sem.Courses.map ( (cour: Course) =>\n                                            <Fragment key={cour.ID}>\n                                                { cour.ID === currentCourseID ? \n                                                    <MutableRow \n                                                        editCourseData = {editCourseData} \n                                                        handleEditCourseChange = {handleEditCourseChange}\n                                                        handleCancelClick = {handleCancelClick}\n                                                    /> \n                                                    :  \n                                                    <ReadOnlyRow \n                                                        cour = {cour}\n                                                        handleEditClick={handleEditClick}\n                                                        handleDeleteClick={handleDeleteClick}\n                                                        setCurrentCourseID={setCurrentCourseID}\n                                                    />\n                                                } \n                                            </Fragment>\n                                        )}\n                                    </tbody>\n                                </table>\n                                <button className = \"edit-semester\" type = \"button\" \n                                    onClick= {() => clearClasses(plan)}>Clear Classes</button>\n                                <button className = \"edit-semester\" type = \"button\" \n                                    onClick= {() => deleteSemester(plan)}>Delete Semester</button>\n                            </form>\n                        </Accordion.Body>\n                    </Accordion.Item>\n                )}\n            </Accordion>\n            <form onSubmit={handleAddCourseSubmit}>\n                <input \n                    type =\"text\"\n                    name = \"School\"\n                    defaultValue={addCourseData.School}\n                    required= {true}\n                    placeholder = \"Enter a School.\"\n                    onChange={handleAddCourseChange}\n                />\n                <input \n                    type = \"number\"\n                    name = \"ClassID\"\n                    defaultValue={addCourseData.ClassID}\n                    required = {true}\n                    placeholder = \"Enter a Class ID.\"\n                    onChange={handleAddCourseChange}\n                />\n                <input \n                    type =\"text\"\n                    name = \"CourseName\"\n                    defaultValue={addCourseData.CourseName}\n                    required = {true}\n                    placeholder = \"Enter a Course Name.\"\n                    onChange={handleAddCourseChange}\n                />\n                <input \n                    type =\"text\"\n                    name = \"Desc\"\n                    defaultValue={addCourseData.Desc}\n                    required = {true}\n                    placeholder = \"Enter a Class Description.\"\n                    onChange={handleAddCourseChange}\n                />\n                <input \n                    type =\"number\"\n                    name = \"Credits\"\n                    defaultValue={addCourseData.Credits}\n                    required = {true}\n                    placeholder = \"Enter a Credit Amount.\"\n                    onChange={handleAddCourseChange}\n                />\n                <button type=\"submit\">Add Course</button>\n            </form>\n        </div>\n        \n    );\n};\n\n/* sidebar in progress\n<div className=\"full-column\">\n    <ProSidebar className=\"sidebar\">\n        <SidebarHeader className=\"sidebar-header\">\n        COURSE LIST\n        </SidebarHeader>\n        <SidebarContent>\n            <Menu iconShape=\"square\">\n                {loadSidebar(\"MATH\")}\n                {loadSidebar(\"CISC\")}\n                {loadSidebar(\"EGGG\")}\n                {loadSidebar(\"HIST\")}\n                {loadSidebar(\"ENGL\")}\n            </Menu>\n        </SidebarContent>\n        <SidebarFooter>\n\n        </SidebarFooter>\n    </ProSidebar>\n</div>\n\n*/\nexport default App;","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}