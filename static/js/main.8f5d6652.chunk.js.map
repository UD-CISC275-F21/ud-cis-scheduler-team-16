{"version":3,"sources":["components/ReadOnlyRow.tsx","components/MutableRow.tsx","components/WelcomeMessage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ReadOnlyRow","course","handleEditClick","handleDeleteClick","School","ClassID","CourseName","Desc","Credits","type","onClick","event","ID","MutableRow","editCourseData","handleEditCourseChange","handleCancelClick","required","placeholder","name","value","onChange","customModal","content","top","left","right","bottom","marginRight","transform","WriteMessage","closeModal","className","App","useState","data","courses","setCourse","React","modalOpen","setOpen","addCourseData","setAddFormData","setEditCourseData","editCourseId","setEditCourseId","handleAddCourseChange","preventDefault","fieldName","target","fieldValue","newCourseData","courseValues","courseID","newCourses","index","findIndex","splice","isOpen","onRequestClose","contentLabel","style","onSubmit","editedCourse","map","newCourse","nanoid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f5d6652.chunk.js","sourcesContent":["import React from \"react\";\nimport { Course } from \"./course\";\n\nconst ReadOnlyRow = ({ course, handleEditClick, handleDeleteClick }:\n    {course : Course , handleEditClick: (event: React.MouseEvent, course: Course) => void, handleDeleteClick: (courseId: string) => void}) => {\n    return(\n        <tr key={course.ID}>\n            <td>{course.School}</td>\n            <td>{course.ClassID}</td>\n            <td>{course.CourseName}</td>\n            <td>{course.Desc}</td>\n            <td>{course.Credits}</td>\n            <td>\n                <button type= \"button\" onClick={(event) => handleEditClick(event, course)}>Edit</button>\n                <button type= \"button\" onClick={()=> handleDeleteClick(course.ID)}>Delete</button>\n            </td>\n        </tr> \n    );\n};\n\nexport default ReadOnlyRow;","import React from \"react\";\nimport { Course } from \"./course\";\n\nconst MutableRow = ({editCourseData, handleEditCourseChange, handleCancelClick}: \n    {editCourseData: Course , handleEditCourseChange: (event: React.ChangeEvent<HTMLInputElement>) => void, handleCancelClick: () => void}) => {\n    return (\n        <tr>\n            <td>\n                <input\n                    type= \"text\"\n                    required = {true}\n                    placeholder= \"Enter School\"\n                    name = \"School\"\n                    value = {editCourseData.School}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>                \n                <input\n                    type= \"number\"\n                    required = {true}\n                    placeholder= \"Enter Course ID\"\n                    name = \"ClassID\"\n                    value = {editCourseData.ClassID}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>\n                <input\n                    type= \"text\"\n                    required = {true}\n                    placeholder= \"Enter Course Name\"\n                    name = \"CourseName\"\n                    value = {editCourseData.CourseName}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>\n                <input\n                    type= \"text\"\n                    required = {true}\n                    placeholder= \"Enter Desc\"\n                    name = \"Desc\"\n                    value = {editCourseData.Desc}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>\n                <input\n                    type= \"number\"\n                    required = {true}\n                    placeholder= \"Enter Credit Amount\"\n                    name = \"Credits\"\n                    value = {editCourseData.Credits}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>\n                <button type= \"submit\">Save</button>\n                <button type= \"button\" onClick={handleCancelClick}>Cancel</button>\n            </td>\n        </tr>\n    );\n};\n\nexport default MutableRow;","import React, { useState, Fragment } from \"react\";\n\nexport const customModal = {\n    content: {\n        top: \"50%\",\n        left: \"50%\",\n        right: \"auto\",\n        bottom: \"auto\",\n        marginRight: \"-50%\",\n        transform: \"translate(-50%, -50%)\",\n    },\n};\n\nexport const WriteMessage = ({closeModal}: {closeModal: VoidFunction}): JSX.Element => {\n    return <div>\n        <p>\n            Welcome to the UDEL course selector and plan creator! <br />\n            This is where you can create your course plan for each semester of college.<br />\n            Just pick your school from the sidebar and drag your courses into each semster to add them. \n        </p>\n        <hr />\n        <button className= \"modal-close\" onClick={closeModal}></button>\n    </div>;\n};","import React, { useState, Fragment } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport \"./App.css\";\nimport data from \"./components/class-list.json\";\nimport { Course } from \"./components/course\";\nimport ReadOnlyRow from \"./components/ReadOnlyRow\";\nimport MutableRow from \"./components/MutableRow\";\nimport  Modal from \"react-modal\";\nimport { WriteMessage } from \"./components/WelcomeMessage\";\nimport { customModal } from \"./components/WelcomeMessage\";\n\n/* Tutorials that assisted in the making of this:\n1. https://youtu.be/dYjdzpZv5yc\n2. NanoID description: https://www.npmjs.com/package/nanoid\n3. Modal: https://www.npmjs.com/package/react-modal\n\n*/\n\nconst App = () => {\n    const [courses, setCourse] = useState(data);\n    const [modalOpen, setOpen] = React.useState(true);\n    const [addCourseData, setAddFormData] = useState<Course>({\n        ID: \"\",\n        School: \"\",\n        ClassID: 108,\n        CourseName: \"\",\n        Desc: \"\",\n        Credits: 3\n    });\n\n    const[editCourseData, setEditCourseData] = useState<Course>\n    ({\n        ID: \"\",\n        School: \"\",\n        ClassID: 108,\n        CourseName: \"\",\n        Desc: \"\",\n        Credits: 3\n    });\n\n    const [editCourseId, setEditCourseId] = useState(\"\");\n\n    const handleAddCourseChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault();\n\n        const fieldName = event.target.name;\n        const fieldValue = event.target.value;\n        const newCourseData = { ...addCourseData, [fieldName]: fieldValue};\n\n        setAddFormData(newCourseData);\n    };\n\n    const handleEditCourseChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault();\n\n        const fieldName = event.target.name;\n        const fieldValue = event.target.value;\n\n        const newCourseData = {...editCourseData, [fieldName]: fieldValue};\n\n        setEditCourseData(newCourseData);\n    };\n\n    const handleAddCourseSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        const newCourse = {\n            ID: nanoid(),\n            School: addCourseData.School,\n            ClassID: addCourseData.ClassID,\n            CourseName: addCourseData.CourseName,\n            Desc: addCourseData.Desc,\n            Credits: addCourseData.Credits\n        };\n\n        const newCourses = [...courses, newCourse];\n        setCourse(newCourses);\n    };\n\n    const handleEditCourseSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        const editedCourse:Course = {\n            ID: editCourseId,\n            School: editCourseData.School,\n            ClassID: editCourseData.ClassID,\n            CourseName: editCourseData.CourseName,\n            Desc: editCourseData.Desc,\n            Credits: editCourseData.Credits\n        };\n\n        const newCourses = [...courses];\n\n        const index = courses.findIndex((course: Course)=> course.ID === editCourseId);\n\n        newCourses[index] = editedCourse;\n\n        setCourse(newCourses);\n        setEditCourseId(\"\");\n    };\n\n\n    const handleEditClick = (event: React.MouseEvent, course: Course)=> {\n        event.preventDefault();\n        setEditCourseId(course.ID);\n\n        const courseValues = {\n            ID: course.ID,\n            School: course.School,\n            ClassID: course.ClassID,\n            CourseName: course.CourseName,\n            Desc: course.Desc,\n            Credits: course.Credits\n        };\n\n        setEditCourseData(courseValues);\n    };\n\n    const handleCancelClick = () => {\n        setEditCourseId(\"\");\n    };\n\n    const handleDeleteClick = (courseID: string) => {\n        const newCourses = [...courses];\n\n        const index = courses.findIndex((course: Course) => course.ID = courseID);\n\n        newCourses.splice(index, 1);\n\n        setCourse(newCourses);\n    };\n\n\n    const closeModal = () => {\n        setOpen(false);\n    };\n    \n    //unused function\n    const openModal = () => {\n        setOpen(true);\n    };\n\n    return <div className= \"app-container\">\n        <Modal\n            isOpen={modalOpen}\n            onRequestClose={closeModal}\n            contentLabel=\"Welcome Message\"\n            style={customModal}\n        >\n            <WriteMessage closeModal={closeModal}></WriteMessage>\n        </Modal>\n        <form onSubmit={handleEditCourseSubmit}>\n            <table>\n                <thead>\n                    <tr>\n                        <th>School</th>\n                        <th>ClassID</th>\n                        <th>Course Name</th>\n                        <th>Desc</th>\n                        <th>Credits</th>\n                        <th>Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {courses.map(course=>  \n                        <Fragment key={course.ID}>\n                            { editCourseId === course.ID ? \n                                <MutableRow \n                                    editCourseData = {editCourseData} \n                                    handleEditCourseChange = {handleEditCourseChange}\n                                    handleCancelClick = {handleCancelClick}\n                                /> \n                                :  \n                                <ReadOnlyRow \n                                    course={course} \n                                    handleEditClick={handleEditClick}\n                                    handleDeleteClick={handleDeleteClick}\n                                />\n                            } \n                        </Fragment>\n                    )}\n                </tbody>\n            </table>\n        </form>\n        <h2>Add another Class</h2>\n        <form onSubmit={handleAddCourseSubmit}>\n            <input \n                type =\"text\"\n                name = \"School\"\n                required= {true}\n                placeholder = \"Enter a School.\"\n                onChange={handleAddCourseChange}\n            />\n            <input \n                type = \"number\"\n                name = \"ClassID\"\n                required = {true}\n                placeholder = \"Enter a Class ID.\"\n                onChange={handleAddCourseChange}\n            />\n            <input \n                type =\"text\"\n                name = \"CourseName\"\n                required = {true}\n                placeholder = \"Enter a Course Name.\"\n                onChange={handleAddCourseChange}\n            />\n            <input \n                type =\"text\"\n                name = \"Desc\"\n                required = {true}\n                placeholder = \"Enter a Class Description.\"\n                onChange={handleAddCourseChange}\n            />\n            <input \n                type =\"number\"\n                name = \"Credits\"\n                required = {true}\n                placeholder = \"Enter a Credit Amount.\"\n                onChange={handleAddCourseChange}\n            />\n            <button type=\"submit\">Add Course</button>\n        </form>\n    </div>;\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}