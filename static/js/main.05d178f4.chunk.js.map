{"version":3,"sources":["components/ReadOnlyRow.tsx","components/MutableRow.tsx","components/WelcomeMessage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ReadOnlyRow","course","handleEditClick","handleDeleteClick","School","ClassID","CourseName","Desc","Credits","className","type","onClick","event","ID","MutableRow","editCourseData","handleEditCourseChange","handleCancelClick","required","placeholder","name","value","onChange","customModal","content","background","top","left","right","bottom","marginRight","transform","WriteMessage","closeModal","App","useState","data","courses","setCourse","React","modalOpen","setOpen","addCourseData","setAddFormData","setEditCourseData","editCourseId","setEditCourseId","handleAddCourseChange","preventDefault","fieldName","target","fieldValue","newCourseData","courseValues","courseID","newCourses","index","findIndex","splice","isOpen","onRequestClose","contentLabel","style","window","location","reload","Accordion","flush","Item","eventKey","Header","Body","onSubmit","editedCourse","map","newCourse","nanoid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"w2BAqBeA,EAjBK,SAAC,GACwI,IADtIC,EACqI,EADrIA,OAAQC,EAC6H,EAD7HA,gBAAiBC,EAC4G,EAD5GA,kBAE5C,OACI,+BACI,6BAAKF,EAAOG,SACZ,6BAAKH,EAAOI,UACZ,6BAAKJ,EAAOK,aACZ,6BAAKL,EAAOM,OACZ,6BAAKN,EAAOO,UACZ,+BACI,wBAAQC,UAAW,aAAaC,KAAM,SAASC,QAAS,SAACC,GAAD,OAAWV,EAAgBU,EAAOX,MAC1F,wBAAQQ,UAAW,eAAeC,KAAM,SAASC,QAAS,kBAAKR,EAAkBF,EAAOY,YARvFZ,EAAOY,KC2DTC,EA9DI,SAAC,GAC0I,IADzIC,EACwI,EADxIA,eAAgBC,EACwH,EADxHA,uBAAwBC,EACgG,EADhGA,kBAEzD,OACI,+BACI,6BACI,uBACIP,KAAM,OACNQ,UAAY,EACZC,YAAa,eACbC,KAAO,SACPC,MAASN,EAAeX,OACxBkB,SAAUN,MAGlB,6BACI,uBACIN,KAAM,SACNQ,UAAY,EACZC,YAAa,kBACbC,KAAO,UACPC,MAASN,EAAeV,QACxBiB,SAAUN,MAGlB,6BACI,uBACIN,KAAM,OACNQ,UAAY,EACZC,YAAa,oBACbC,KAAO,aACPC,MAASN,EAAeT,WACxBgB,SAAUN,MAGlB,6BACI,uBACIN,KAAM,OACNQ,UAAY,EACZC,YAAa,aACbC,KAAO,OACPC,MAASN,EAAeR,KACxBe,SAAUN,MAGlB,6BACI,uBACIN,KAAM,SACNQ,UAAY,EACZC,YAAa,sBACbC,KAAO,UACPC,MAASN,EAAeP,QACxBc,SAAUN,MAGlB,+BACI,wBAAQP,UAAW,aAAaC,KAAM,WACtC,wBAAQD,UAAW,eAAeC,KAAM,SAASC,QAASM,W,iBCzD7DM,EAAc,CACvBC,QAAS,CACLC,WAAY,QACZC,IAAK,MACLC,KAAM,MACNC,MAAO,OACPC,OAAQ,OACRC,YAAa,OACbC,UAAW,0BAINC,EAAe,SAAC,GAA2D,IAA1DC,EAAyD,EAAzDA,WAC1B,OAAO,sBAAKxB,UAAU,kBAAf,UACH,oBAAIA,UAAW,yBAAf,+CACA,oBAAGA,UAAY,uBAAf,wFAC+E,uBAD/E,0EAE2E,0BAE3E,8CAEI,+BACI,kFACA,qFACA,gFACA,uFAGR,wBAAQA,UAAW,cAAcE,QAASsB,QC4MnCC,EAvNH,WACR,MAA6BC,mBAASC,GAAtC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA6BC,IAAMJ,UAAS,GAA5C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAwCN,mBAAiB,CACrDtB,GAAI,GACJT,OAAQ,GACRC,QAAS,IACTC,WAAY,GACZC,KAAM,GACNC,QAAS,IANb,mBAAOkC,EAAP,KAAsBC,EAAtB,KASA,EAA2CR,mBAC1C,CACGtB,GAAI,GACJT,OAAQ,GACRC,QAAS,IACTC,WAAY,GACZC,KAAM,GACNC,QAAS,IAPb,mBAAMO,EAAN,KAAsB6B,EAAtB,KAUA,EAAwCT,mBAAS,IAAjD,mBAAOU,EAAP,KAAqBC,EAArB,KAEMC,EAAwB,SAACnC,GAC3BA,EAAMoC,iBAEN,IAAMC,EAAYrC,EAAMsC,OAAO9B,KACzB+B,EAAavC,EAAMsC,OAAO7B,MAC1B+B,EAAa,2BAAQV,GAAR,kBAAwBO,EAAYE,IAEvDR,EAAeS,IAGbpC,EAAyB,SAACJ,GAC5BA,EAAMoC,iBAEN,IAAMC,EAAYrC,EAAMsC,OAAO9B,KACzB+B,EAAavC,EAAMsC,OAAO7B,MAE1B+B,EAAa,2BAAOrC,GAAP,kBAAwBkC,EAAYE,IAEvDP,EAAkBQ,IAyChBlD,EAAkB,SAACU,EAAyBX,GAC9CW,EAAMoC,iBACNF,EAAgB7C,EAAOY,IAEvB,IAAMwC,EAAe,CACjBxC,GAAIZ,EAAOY,GACXT,OAAQH,EAAOG,OACfC,QAASJ,EAAOI,QAChBC,WAAYL,EAAOK,WACnBC,KAAMN,EAAOM,KACbC,QAASP,EAAOO,SAGpBoC,EAAkBS,IAGhBpC,EAAoB,WACtB6B,EAAgB,KAGd3C,EAAoB,SAACmD,GACvB,IAAMC,EAAU,YAAOlB,GAEjBmB,EAAQnB,EAAQoB,WAAU,SAACxD,GAAD,OAAoBA,EAAOY,GAAKyC,KAEhEC,EAAWG,OAAOF,EAAO,GAEzBlB,EAAUiB,IAIRtB,EAAa,WACfQ,GAAQ,IAOZ,OAAO,sBAAKhC,UAAW,gBAAhB,UACH,cAAC,IAAD,CACIkD,OAAQnB,EACRoB,eAAgB3B,EAChB4B,aAAa,kBACbC,MAAOvC,EAJX,SAMI,cAAC,EAAD,CAAcU,WAAYA,MAE9B,wBAAQxB,UAAU,eAAeE,QAbjB,WAChBoD,OAAOC,SAASC,YAahB,oBAAIxD,UAAU,SAAd,8BACA,cAACyD,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,eAACD,EAAA,EAAUE,KAAX,CAAgBC,SAAW,IAA3B,UACI,cAACH,EAAA,EAAUI,OAAX,yBACA,eAACJ,EAAA,EAAUK,KAAX,WACI,sBAAMC,SA5ES,SAAC5D,GAC5BA,EAAMoC,iBAEN,IAAMyB,EAAsB,CACxB5D,GAAIgC,EACJzC,OAAQW,EAAeX,OACvBC,QAASU,EAAeV,QACxBC,WAAYS,EAAeT,WAC3BC,KAAMQ,EAAeR,KACrBC,QAASO,EAAeP,SAGtB+C,EAAU,YAAOlB,GAIvBkB,EAFclB,EAAQoB,WAAU,SAACxD,GAAD,OAAmBA,EAAOY,KAAOgC,MAE7C4B,EAEpBnC,EAAUiB,GACVT,EAAgB,KAyDJ,SACI,kCACI,gCACI,+BACI,wCACA,yCACA,6CACA,sCACA,yCACA,8CAGR,gCACKT,EAAQqC,KAAI,SAAAzE,GAAM,OACf,cAAC,WAAD,UACM4C,IAAiB5C,EAAOY,GACtB,cAAC,EAAD,CACIE,eAAkBA,EAClBC,uBAA0BA,EAC1BC,kBAAqBA,IAGzB,cAAC,EAAD,CACIhB,OAAQA,EACRC,gBAAiBA,EACjBC,kBAAmBA,KAXhBF,EAAOY,cAmBtC,mDACA,uBAAM2D,SA9HQ,SAAC5D,GAC3BA,EAAMoC,iBAEN,IAAM2B,EAAY,CACd9D,GAAI+D,cACJxE,OAAQsC,EAActC,OACtBC,QAASqC,EAAcrC,QACvBC,WAAYoC,EAAcpC,WAC1BC,KAAMmC,EAAcnC,KACpBC,QAASkC,EAAclC,SAGrB+C,EAAU,sBAAOlB,GAAP,CAAgBsC,IAChCrC,EAAUiB,IAiHE,UACI,uBACI7C,KAAM,OACNU,KAAO,SACPF,UAAW,EACXC,YAAc,kBACdG,SAAUyB,IAEd,uBACIrC,KAAO,SACPU,KAAO,UACPF,UAAY,EACZC,YAAc,oBACdG,SAAUyB,IAEd,uBACIrC,KAAM,OACNU,KAAO,aACPF,UAAY,EACZC,YAAc,uBACdG,SAAUyB,IAEd,uBACIrC,KAAM,OACNU,KAAO,OACPF,UAAY,EACZC,YAAc,6BACdG,SAAUyB,IAEd,uBACIrC,KAAM,SACNU,KAAO,UACPF,UAAY,EACZC,YAAc,yBACdG,SAAUyB,IAEd,wBAAQrC,KAAK,SAAb,uCCrNTmE,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHpBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,K","file":"static/js/main.05d178f4.chunk.js","sourcesContent":["import React from \"react\";\nimport { Course } from \"./course\";\nimport \"../App.css\";\n\nconst ReadOnlyRow = ({ course, handleEditClick, handleDeleteClick }:\n    {course : Course , handleEditClick: (event: React.MouseEvent, course: Course) => void, handleDeleteClick: (courseId: string) => void}) : JSX.Element => {\n    return(\n        <tr key={course.ID}>\n            <td>{course.School}</td>\n            <td>{course.ClassID}</td>\n            <td>{course.CourseName}</td>\n            <td>{course.Desc}</td>\n            <td>{course.Credits}</td>\n            <td>\n                <button className= \"edit-class\" type= \"button\" onClick={(event) => handleEditClick(event, course)}></button>\n                <button className= \"delete-class\" type= \"button\" onClick={()=> handleDeleteClick(course.ID)}></button>\n            </td>\n        </tr> \n    );\n};\n\nexport default ReadOnlyRow;","import React from \"react\";\nimport { Course } from \"./course\";\nimport \"../App.css\";\n\nconst MutableRow = ({editCourseData, handleEditCourseChange, handleCancelClick}: \n    {editCourseData: Course , handleEditCourseChange: (event: React.ChangeEvent<HTMLInputElement>) => void, handleCancelClick: () => void}) : JSX.Element => {\n    return (\n        <tr>\n            <td>\n                <input\n                    type= \"text\"\n                    required = {true}\n                    placeholder= \"Enter School\"\n                    name = \"School\"\n                    value = {editCourseData.School}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>                \n                <input\n                    type= \"number\"\n                    required = {true}\n                    placeholder= \"Enter Course ID\"\n                    name = \"ClassID\"\n                    value = {editCourseData.ClassID}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>\n                <input\n                    type= \"text\"\n                    required = {true}\n                    placeholder= \"Enter Course Name\"\n                    name = \"CourseName\"\n                    value = {editCourseData.CourseName}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>\n                <input\n                    type= \"text\"\n                    required = {true}\n                    placeholder= \"Enter Desc\"\n                    name = \"Desc\"\n                    value = {editCourseData.Desc}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>\n                <input\n                    type= \"number\"\n                    required = {true}\n                    placeholder= \"Enter Credit Amount\"\n                    name = \"Credits\"\n                    value = {editCourseData.Credits}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>\n                <button className= \"save-class\" type= \"submit\"></button>\n                <button className= \"cancel-class\" type= \"button\" onClick={handleCancelClick}></button>\n            </td>\n        </tr>\n    );\n};\n\nexport default MutableRow;","import React from \"react\";\nimport \"../App.css\";\n\nexport const customModal = {\n    content: {\n        background: \"white\",\n        top: \"50%\",\n        left: \"50%\",\n        right: \"auto\",\n        bottom: \"auto\",\n        marginRight: \"-50%\",\n        transform: \"translate(-50%, -50%)\",\n    },\n};\n\nexport const WriteMessage = ({closeModal}: {closeModal: VoidFunction}): JSX.Element => {\n    return <div className=\"welcome-message\">\n        <h2 className= \"welcome-message-header\">Welcome to the UDEL Plan Creater!</h2>\n        <p className = \"welcome-message-body\">\n            This is where you can create your course plan for each semester of college.<br />\n            On this site you will be able to visualize your entire college career. <br />\n        </p>\n        <p>\n            Features are:\n            <ul>\n                <li>Students can add or delete a class in a semester</li>\n                <li>Students can add or delete a semester of there plan</li>\n                <li>Students are able to see an entire course list</li>\n                <li>Students can read the description of the course</li>\n            </ul>\n        </p>\n        <button className= \"modal-close\" onClick={closeModal}></button>\n    </div>;\n};","import React, { useState, Fragment } from \"react\";\nimport { Accordion } from \"react-bootstrap\";\nimport { nanoid } from \"nanoid\";\nimport \"./App.css\";\nimport data from \"./components/class-list.json\";\nimport { Course } from \"./components/course\";\nimport ReadOnlyRow from \"./components/ReadOnlyRow\";\nimport MutableRow from \"./components/MutableRow\";\nimport  Modal from \"react-modal\";\nimport { WriteMessage } from \"./components/WelcomeMessage\";\nimport { customModal } from \"./components/WelcomeMessage\";\n\n/* Resources that assisted in the making of this:\n1. Basis of the semester table: https://youtu.be/dYjdzpZv5yc\n2. NanoID description: https://www.npmjs.com/package/nanoid\n3. React-bootstrap accordion: https://react-bootstrap.github.io/components/accordion/\n4. Modal: https://www.npmjs.com/package/react-modal\n\n*/\n\nconst App = () : JSX.Element => {\n    const [courses, setCourse] = useState(data);\n    const [modalOpen, setOpen] = React.useState(true);\n    const [addCourseData, setAddFormData] = useState<Course>({\n        ID: \"\",\n        School: \"\",\n        ClassID: 108,\n        CourseName: \"\",\n        Desc: \"\",\n        Credits: 3\n    });\n\n    const[editCourseData, setEditCourseData] = useState<Course>\n    ({\n        ID: \"\",\n        School: \"\",\n        ClassID: 108,\n        CourseName: \"\",\n        Desc: \"\",\n        Credits: 3\n    });\n\n    const [editCourseId, setEditCourseId] = useState(\"\");\n\n    const handleAddCourseChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault();\n\n        const fieldName = event.target.name;\n        const fieldValue = event.target.value;\n        const newCourseData = { ...addCourseData, [fieldName]: fieldValue};\n\n        setAddFormData(newCourseData);\n    };\n\n    const handleEditCourseChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault();\n\n        const fieldName = event.target.name;\n        const fieldValue = event.target.value;\n\n        const newCourseData = {...editCourseData, [fieldName]: fieldValue};\n\n        setEditCourseData(newCourseData);\n    };\n\n    const handleAddCourseSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        const newCourse = {\n            ID: nanoid(),\n            School: addCourseData.School,\n            ClassID: addCourseData.ClassID,\n            CourseName: addCourseData.CourseName,\n            Desc: addCourseData.Desc,\n            Credits: addCourseData.Credits\n        };\n\n        const newCourses = [...courses, newCourse];\n        setCourse(newCourses);\n    };\n\n    const handleEditCourseSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        const editedCourse:Course = {\n            ID: editCourseId,\n            School: editCourseData.School,\n            ClassID: editCourseData.ClassID,\n            CourseName: editCourseData.CourseName,\n            Desc: editCourseData.Desc,\n            Credits: editCourseData.Credits\n        };\n\n        const newCourses = [...courses];\n\n        const index = courses.findIndex((course: Course)=> course.ID === editCourseId);\n\n        newCourses[index] = editedCourse;\n\n        setCourse(newCourses);\n        setEditCourseId(\"\");\n    };\n\n    const handleEditClick = (event: React.MouseEvent, course: Course)=> {\n        event.preventDefault();\n        setEditCourseId(course.ID);\n\n        const courseValues = {\n            ID: course.ID,\n            School: course.School,\n            ClassID: course.ClassID,\n            CourseName: course.CourseName,\n            Desc: course.Desc,\n            Credits: course.Credits\n        };\n\n        setEditCourseData(courseValues);\n    };\n\n    const handleCancelClick = () => {\n        setEditCourseId(\"\");\n    };\n\n    const handleDeleteClick = (courseID: string) => {\n        const newCourses = [...courses];\n\n        const index = courses.findIndex((course: Course) => course.ID = courseID);\n\n        newCourses.splice(index, 1);\n\n        setCourse(newCourses);\n    };\n\n\n    const closeModal = () => {\n        setOpen(false);\n    };\n\n    const refreshPage = () => {\n        window.location.reload();\n    };\n\n    return <div className= \"app-container\">\n        <Modal\n            isOpen={modalOpen}\n            onRequestClose={closeModal}\n            contentLabel=\"Welcome Message\"\n            style={customModal}\n        >\n            <WriteMessage closeModal={closeModal}></WriteMessage>\n        </Modal>\n        <button className=\"refresh-logo\" onClick={refreshPage}></button> \n        <h1 className=\"header\">UD CIS Scheduler</h1>\n        <Accordion flush>\n            <Accordion.Item eventKey = \"0\">\n                <Accordion.Header>Semester 1</Accordion.Header>\n                <Accordion.Body>\n                    <form onSubmit={handleEditCourseSubmit}>\n                        <table>\n                            <thead>\n                                <tr>\n                                    <th>School</th>\n                                    <th>ClassID</th>\n                                    <th>Course Name</th>\n                                    <th>Desc</th>\n                                    <th>Credits</th>\n                                    <th>Actions</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {courses.map(course=>  \n                                    <Fragment key={course.ID}>\n                                        { editCourseId === course.ID ? \n                                            <MutableRow \n                                                editCourseData = {editCourseData} \n                                                handleEditCourseChange = {handleEditCourseChange}\n                                                handleCancelClick = {handleCancelClick}\n                                            /> \n                                            :  \n                                            <ReadOnlyRow \n                                                course={course} \n                                                handleEditClick={handleEditClick}\n                                                handleDeleteClick={handleDeleteClick}\n                                            />\n                                        } \n                                    </Fragment>\n                                )}\n                            </tbody>\n                        </table>\n                    </form>\n                    <h2>Add another Class</h2>\n                    <form onSubmit={handleAddCourseSubmit}>\n                        <input \n                            type =\"text\"\n                            name = \"School\"\n                            required= {true}\n                            placeholder = \"Enter a School.\"\n                            onChange={handleAddCourseChange}\n                        />\n                        <input \n                            type = \"number\"\n                            name = \"ClassID\"\n                            required = {true}\n                            placeholder = \"Enter a Class ID.\"\n                            onChange={handleAddCourseChange}\n                        />\n                        <input \n                            type =\"text\"\n                            name = \"CourseName\"\n                            required = {true}\n                            placeholder = \"Enter a Course Name.\"\n                            onChange={handleAddCourseChange}\n                        />\n                        <input \n                            type =\"text\"\n                            name = \"Desc\"\n                            required = {true}\n                            placeholder = \"Enter a Class Description.\"\n                            onChange={handleAddCourseChange}\n                        />\n                        <input \n                            type =\"number\"\n                            name = \"Credits\"\n                            required = {true}\n                            placeholder = \"Enter a Credit Amount.\"\n                            onChange={handleAddCourseChange}\n                        />\n                        <button type=\"submit\">Add Course</button>\n                    </form>       \n                </Accordion.Body>\n            </Accordion.Item>\n        </Accordion>\n    </div>;\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}