{"version":3,"sources":["components/SaveAndLoad.tsx","components/WelcomeMessage.tsx","components/ReadOnlyRow.tsx","components/MutableRow.tsx","components/PlanViewer.tsx","components/SemesterFunctions.tsx","components/EditCourse.tsx","components/sidebar.tsx","components/AddCourse.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LOCAL_STORAGE_PLAN","INITIAL_PLAN","ID","SemesterName","Courses","customModal","content","background","top","left","right","bottom","marginRight","transform","refreshPage","window","location","reload","WriteMessage","closeModal","className","onClick","ReadOnlyRow","plan","setPlan","setCurrentSemesterID","currentSemesterID","cour","currentCourseID","setCurrentCourseID","handleEditClick","handleDeleteClick","setEditCourseData","School","ClassID","CourseName","Desc","Credits","type","event","MutableRow","editCourseData","handleEditCourseChange","handleCancelClick","required","placeholder","name","value","onChange","PlanViewer","semNum","setSemNum","role","newSemester","nanoid","addSemester","newPlan","map","inner","splice","length","clearSemesters","localStorage","setItem","JSON","stringify","alert","save","Accordion","flush","sem","Item","eventKey","Header","Body","onSubmit","preventDefault","semIndex","findIndex","semester","editedCourse","courseIndex","course","handleEditCourseSubmit","fieldName","target","fieldValue","courIndex","clearClasses","index","deleteSemester","DisplayDepartment","Department","data","acour","DepartmentChecker","addCourseData","newCourse","push","handleAddCourseClick","addedcourse","BlankUpdater","App","useState","rawPlan","getItem","parse","load","modalOpen","setOpen","isOpen","onRequestClose","contentLabel","style","iconShape","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81b05b51.chunk.js","sourcesContent":["import { Semester } from \"../interfaces/semester\";\n\nexport const LOCAL_STORAGE_PLAN = \"fouryearplanner_plan\";\nexport const INITIAL_PLAN: Semester[] = [\n    { ID: \"0\", SemesterName: \"Semester 1\", Courses: [] }\n];\n\nexport function save(plan : Semester[]): void{ \n    localStorage.setItem(LOCAL_STORAGE_PLAN, JSON.stringify(plan));\n    alert(\"Plan saved! This plan will be loaded whenever you load back into this page.\");\n}\n\nexport function load() : Semester[] {\n    const rawPlan: string | null = localStorage.getItem(LOCAL_STORAGE_PLAN);\n    if (rawPlan === null) {\n        return [...INITIAL_PLAN];\n    } else {\n        return JSON.parse(rawPlan);\n    }\n}\n\nexport function clearSave(): void{\n    localStorage.setItem(LOCAL_STORAGE_PLAN, JSON.stringify(INITIAL_PLAN));\n    alert(\"Save cleared! Refresh your page to start again.\");\n}","import React from \"react\";\nimport \"../App.css\";\n\nexport const customModal = {\n    content: {\n        background: \"white\",\n        top: \"50%\",\n        left: \"50%\",\n        right: \"auto\",\n        bottom: \"auto\",\n        marginRight: \"-50%\",\n        transform: \"translate(-50%, -50%)\",\n    },\n};\n\nexport function refreshPage(): void{\n    window.location.reload();\n}\nexport const WriteMessage = ({closeModal}:{closeModal : () => void}): JSX.Element => {\n    return <div className=\"welcome-message\">\n        <h2 className= \"welcome-message-header\">Welcome to the UDEL Plan Creater!</h2>\n        <p className = \"welcome-message-body\">\n            This is where you can create your course plan for each semester of college.<br />\n            On this site you will be able to visualize your entire college career. <br />\n        </p>\n        <p>\n            Tutorial:\n            <ol>\n                <li>You start with a plan with just one empty semester.</li>\n                <li>You can choose to add semesters, clear all semesters from your plan, save plans, and clear your save state.</li>\n                <li>Once expanding a semester, you can add classes manually through the form at the below the accordion.</li>\n                <li>Once you have courses, you can edit or delete singular courses, clear all courses from your semester, or delete semesters.</li>\n                <li>Remember that everyones academic journey is unique. One size never fits all in college, dont get discouraged! Your plan is your path to your future, no matter how long or short it is.</li>\n            </ol>\n        </p>\n        <button className= \"modal-close\" onClick={closeModal}></button>\n    </div>;\n};","import React from \"react\";\nimport { Semester } from \"../interfaces/semester\";\nimport { Course } from \"../interfaces/course\";\nimport \"../App.css\";\nimport \"../App.tsx\";\n\nconst ReadOnlyRow = ({ plan, setPlan, setCurrentSemesterID, currentSemesterID, cour, currentCourseID, setCurrentCourseID, handleEditClick, handleDeleteClick, setEditCourseData}:\n    {cour: Course , currentCourseID: string, setEditCourseData: React.Dispatch<React.SetStateAction<Course>>,plan: Semester[], setPlan: React.Dispatch<React.SetStateAction<Semester[]>>, \n        currentSemesterID: string, setCurrentSemesterID: React.Dispatch<React.SetStateAction<string>>, setCurrentCourseID: (value: React.SetStateAction<string>) => void, \n        handleEditClick: (event: React.MouseEvent, cour: Course, currentCourseID: string, setCurrentCourseID: React.Dispatch<React.SetStateAction<string>>, setEditCourseData: React.Dispatch<React.SetStateAction<Course>>) => void, \n        handleDeleteClick: (event: React.MouseEvent, cour: Course, plan: Semester[], currentSemesterID: string, setCurrentSemesterID: React.Dispatch<React.SetStateAction<string>>, setPlan: React.Dispatch<React.SetStateAction<Semester[]>>) => void}) : JSX.Element => {\n    return( \n        <tr key= {cour.ID} onClick= {() => setCurrentCourseID(cour.ID)}>\n            <td>{cour.School}</td>\n            <td>{cour.ClassID}</td>\n            <td>{cour.CourseName}</td>\n            <td>{cour.Desc}</td>\n            <td>{cour.Credits}</td>\n            <td>\n                <button className= \"edit-class\" type= \"button\" onClick={(event) => handleEditClick(event, cour, currentCourseID, setCurrentCourseID, setEditCourseData)}></button>\n                <button className= \"delete-class\" type= \"button\" onClick={(event)=> handleDeleteClick(event, cour, plan, currentSemesterID, setCurrentSemesterID, setPlan)}></button>\n            </td>\n        </tr> \n    );\n};\n\nexport default ReadOnlyRow;","import React from \"react\";\nimport { Course } from \"../interfaces/course\";\nimport \"../App.css\";\n\nconst MutableRow = ({editCourseData, handleEditCourseChange, handleCancelClick}: \n    {editCourseData: Course , handleEditCourseChange: (event: React.ChangeEvent<HTMLInputElement>) => void, handleCancelClick: () => void}) : JSX.Element => {\n    return (\n        <tr>\n            <td>\n                <input\n                    type= \"text\"\n                    required = {true}\n                    placeholder= \"Enter School\"\n                    name = \"School\"\n                    value = {editCourseData.School}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>                \n                <input\n                    type= \"number\"\n                    required = {true}\n                    placeholder= \"Enter Course ID\"\n                    name = \"ClassID\"\n                    value = {editCourseData.ClassID}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>\n                <input\n                    type= \"text\"\n                    required = {true}\n                    placeholder= \"Enter Course Name\"\n                    name = \"CourseName\"\n                    value = {editCourseData.CourseName}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>\n                <input\n                    type= \"text\"\n                    required = {true}\n                    placeholder= \"Enter Desc\"\n                    name = \"Desc\"\n                    value = {editCourseData.Desc}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>\n                <input\n                    type= \"number\"\n                    required = {true}\n                    placeholder= \"Enter Credit Amount\"\n                    name = \"Credits\"\n                    value = {editCourseData.Credits}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>\n                <button className= \"save-class\" type= \"submit\"></button>\n                <button className= \"cancel-class\" type= \"button\" onClick={handleCancelClick}></button>\n            </td>\n        </tr>\n    );\n};\n\nexport default MutableRow;","import React, { Fragment } from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport { handleEditCourseChange, handleEditClick, handleEditCourseSubmit} from \"./EditCourse\";\nimport { addSemester, deleteSemester, clearSemesters, clearClasses } from \"./SemesterFunctions\";\nimport { save, clearSave } from \"./SaveAndLoad\";\nimport { refreshPage } from \"./WelcomeMessage\";\nimport ReadOnlyRow from \"./ReadOnlyRow\";\nimport MutableRow from \"./MutableRow\";\nimport { Course } from \"../interfaces/course\";\nimport { Semester } from \"../interfaces/semester\";\n\nconst handleDeleteClick = (event: React.MouseEvent, cour: Course, plan : Semester[], currentSemesterID: string,\n    setCurrentCourseID: React.Dispatch<React.SetStateAction<string>>, setPlan: React.Dispatch<React.SetStateAction<Semester[]>>) => {\n    event.preventDefault();\n    const newPlan = plan.map(inner =>{ \n        return {...inner, Courses: [...inner.Courses]}; \n    });\n    const semIndex = plan.findIndex(semester => semester.ID === currentSemesterID);\n    const courIndex = plan[semIndex].Courses.findIndex(course => course.ID === cour.ID);\n\n\n    newPlan[semIndex].Courses.splice(courIndex, 1);        \n    setPlan(newPlan);\n    setCurrentCourseID(\"\");\n};\n\nconst handleCancelClick = (setCurrentCourseID: React.Dispatch<React.SetStateAction<string>>) => {\n    setCurrentCourseID(\"\");\n};\n\nexport const PlanViewer = ({plan, setPlan, currentSemesterID, setCurrentSemesterID, currentCourseID, \n    setCurrentCourseID, editCourseData, setEditCourseData, semNum, setSemNum}: \n    {plan: Semester[], setPlan: React.Dispatch<React.SetStateAction<Semester[]>>,\n    currentSemesterID: string, setCurrentSemesterID: React.Dispatch<React.SetStateAction<string>>,\n    currentCourseID: string, setCurrentCourseID: React.Dispatch<React.SetStateAction<string>>,\n    editCourseData: Course, setEditCourseData: React.Dispatch<React.SetStateAction<Course>>,\n    semNum: number, setSemNum: React.Dispatch<React.SetStateAction<number>>}): JSX.Element => {\n    return(\n        <div className = \"plan-viewer\">\n            <div className=\"row\">\n                <div className=\"col-8\">\n                    <div className = \"page-header\">\n                        <h1 className=\"display-1\"> <button className=\"refresh-logo\" onClick={refreshPage}></button> UD CIS Scheduler</h1>\n                    </div>\n                    <button role = \"add-semester\" className = \"edit-semester\" type = \"button\" \n                        onClick= {() => addSemester(plan, setPlan, semNum, setSemNum)}>Add Semester</button>\n                    <button role = \"clear-semesters\" className = \"edit-semester\" type = \"button\" \n                        onClick= {() => clearSemesters(plan, setPlan, setCurrentSemesterID, setSemNum)}>Clear All Semesters</button>\n                    <button role = \"save-plan\" className = \"edit-semester\" type = \"button\" \n                        onClick= {() => save(plan)}>Save Plan</button>\n                    <button role = \"clear-plan\" className = \"edit-semester\" type = \"button\" \n                        onClick= {() => clearSave()}>Clear Current Save state</button>\n                    <br />\n                </div>\n            </div>\n            <Accordion role= \"semester-display\" flush>\n                { plan.map ( (sem: Semester) =>\n                    <Accordion.Item eventKey= {sem.ID}  key = {sem.ID}>\n                        <Accordion.Header onClick= {() => setCurrentSemesterID(sem.ID)}>{sem.SemesterName}</Accordion.Header>\n                        <Accordion.Body>\n                            <form onSubmit={(event: React.FormEvent<HTMLFormElement>)=> handleEditCourseSubmit(event, currentSemesterID, currentCourseID, plan, setPlan, setCurrentCourseID, editCourseData)}>\n                                <table>\n                                    <thead>\n                                        <tr>\n                                            <th>School</th>\n                                            <th>ClassID</th>\n                                            <th>Course Name</th>\n                                            <th>Desc</th>\n                                            <th>Credits</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        { sem.Courses.map ( (cour: Course) =>\n                                            <Fragment key={cour.ID}>\n                                                { cour.ID === currentCourseID ? \n                                                    <MutableRow //What allows a user to edit their course.\n                                                        editCourseData = {editCourseData} \n                                                        handleEditCourseChange = {(event: React.ChangeEvent<HTMLInputElement>) => handleEditCourseChange(event, editCourseData, setEditCourseData)}\n                                                        handleCancelClick = {() => handleCancelClick(setCurrentCourseID)}\n                                                    /> \n                                                    :  \n                                                    <ReadOnlyRow //What displays a course on the table.\n                                                        plan = {plan}\n                                                        setPlan = {setPlan}\n                                                        currentSemesterID = {currentSemesterID}\n                                                        setCurrentSemesterID = {setCurrentSemesterID}\n                                                        cour = {cour}\n                                                        handleEditClick={(event: React.MouseEvent) => handleEditClick(event, cour, currentCourseID, setCurrentCourseID, setEditCourseData)}\n                                                        handleDeleteClick={(event: React.MouseEvent) => handleDeleteClick(event, cour, plan, currentSemesterID, setCurrentCourseID, setPlan)}\n                                                        currentCourseID= {currentCourseID}\n                                                        setCurrentCourseID={setCurrentCourseID}\n                                                        setEditCourseData={setEditCourseData}\n                                                    />\n                                                } \n                                            </Fragment>\n                                        )}\n                                    </tbody>\n                                </table>\n                                <button role= \"clear-classes\" className = \"edit-semester\" type = \"button\" \n                                    onClick= {() => clearClasses(plan, setPlan, currentSemesterID, setCurrentCourseID)}>Clear Classes</button>\n                                <button role= \"delete-semester\" className = \"edit-semester\" type = \"button\" \n                                    onClick= {() => deleteSemester(plan, setPlan, currentSemesterID, setCurrentSemesterID, semNum, setSemNum)}>Delete Semester</button>\n                            </form>\n                        </Accordion.Body>\n                    </Accordion.Item>\n                )}\n            </Accordion>\n        </div>\n    );\n};","import { Semester } from \"../interfaces/semester\";\nimport { nanoid } from \"nanoid\";\n\n\nexport function addSemester(plan : Semester[], setPlan: React.Dispatch<React.SetStateAction<Semester[]>>, \n    semNum: number, setSemNum : React.Dispatch<React.SetStateAction<number>>): void{\n    const newSemester ={\n        ID: nanoid(),\n        SemesterName: \"Semester\" + semNum,\n        Courses: []\n    };\n\n    setSemNum(semNum + 1);\n    setPlan([...plan, newSemester]);\n}\n\nexport function deleteSemester(plan : Semester[], setPlan : React.Dispatch<React.SetStateAction<Semester[]>>,\n    currentSemesterID: string, setCurrentSemesterID: React.Dispatch<React.SetStateAction<string>>, \n    semNum: number, setSemNum : React.Dispatch<React.SetStateAction<number>>): void{\n    const newPlan = plan.map(inner =>{ \n        return {...inner}; \n    });\n    const index = plan.findIndex((semester: Semester) => semester.ID === currentSemesterID);\n\n    //Note for later, add something in here that updates the other semester number when this is called\n\n    newPlan.splice(index, 1);\n    setPlan(newPlan);\n    setCurrentSemesterID(\"\");\n    setSemNum(semNum-1);\n}\n// Clears all semesters from a plan\nexport function clearSemesters(plan : Semester[], setPlan: React.Dispatch<React.SetStateAction<Semester[]>>, \n    setCurrentSemesterID: React.Dispatch<React.SetStateAction<string>>, setSemNum : React.Dispatch<React.SetStateAction<number>> ): void{\n    const newPlan = plan.map(inner =>{ \n        return {...inner}; \n    });\n    newPlan.splice(0, newPlan.length);\n    \n    setPlan(newPlan);\n    setCurrentSemesterID(\"\");\n    setSemNum(1);\n}\n\nexport function clearClasses(plan : Semester[], setPlan : React.Dispatch<React.SetStateAction<Semester[]>>,\n    currentSemesterID: string, setCurrentCourseID: React.Dispatch<React.SetStateAction<string>>): void { // Clears all classes from a semester\n    const newPlan = plan.map(inner =>{ \n        return {...inner}; \n    });\n    const index = plan.findIndex((semester: Semester) => semester.ID === currentSemesterID);\n\n    newPlan[index].Courses = [];\n    setPlan(newPlan);\n    setCurrentCourseID(\"\");\n}","import React from \"react\";\nimport { Semester } from \"../interfaces/semester\";\nimport { Course } from \"../interfaces/course\";\n\n\nexport const handleEditCourseChange = (event: React.ChangeEvent<HTMLInputElement>, editCourseData: Course,\n    setEditCourseData: React.Dispatch<React.SetStateAction<Course>>): void => {\n    event.preventDefault();\n\n    const fieldName = event.target.name;\n    const fieldValue = event.target.value;\n\n    const newCourseData = {...editCourseData, [fieldName]: fieldValue};\n\n    setEditCourseData(newCourseData);\n};\n\nexport const handleEditClick = (event: React.MouseEvent, cour: Course, currentCourseID : string, \n    setCurrentCourseID: React.Dispatch<React.SetStateAction<string>>, setEditCourseData: React.Dispatch<React.SetStateAction<Course>>): void => {\n    event.preventDefault();\n\n    const courseValues = {\n        ID: currentCourseID,\n        School: cour.School,\n        ClassID: cour.ClassID,\n        CourseName: cour.CourseName,\n        Desc: cour.Desc,\n        Credits: cour.Credits\n    };\n\n    setEditCourseData(courseValues);\n    setCurrentCourseID(\"\");\n};\n\nexport const handleEditCourseSubmit = (event: React.FormEvent<HTMLFormElement>, currentSemesterID: string,\n    currentCourseID: string, plan: Semester[], setPlan: React.Dispatch<React.SetStateAction<Semester[]>>, \n    setCurrentCourseID: React.Dispatch<React.SetStateAction<string>>, editCourseData: Course): void => {\n    event.preventDefault();\n    const newPlan = plan.map(inner =>{ \n        return {...inner, Courses: [...inner.Courses]}; \n    });\n    const semIndex = plan.findIndex((semester: Semester) => semester.ID === currentSemesterID);\n\n    const editedCourse:Course = {\n        ID: currentCourseID,\n        School: editCourseData.School,\n        ClassID: editCourseData.ClassID,\n        CourseName: editCourseData.CourseName,\n        Desc: editCourseData.Desc,\n        Credits: editCourseData.Credits\n    };\n\n    const courseIndex = plan[semIndex].Courses.findIndex((course: Course)=> course.ID === currentCourseID);\n    newPlan[semIndex].Courses[courseIndex] = editedCourse;\n    setPlan(newPlan);\n    setCurrentCourseID(\"\");\n};\n\n","import React from \"react\";\nimport { Semester } from \"../interfaces/semester\";\nimport { nanoid } from \"nanoid\";\nimport { Course } from \"../interfaces/course\";\nimport { handleAddCourseClick } from \"./AddCourse\";\nimport data from \"../assets/course.json\";\nimport \"../App.css\";\n\nexport interface SidebarProp {\n    School: string,\n    ClassID: number,\n    CourseName: string,\n    Desc: string,\n    PreReq: string,\n    CoReq: string,\n    Credits: number\n}\n\nfunction DepartmentChecker(acour: SidebarProp, Department: string): boolean {\n    let result = false; \n    if(acour.School === Department){\n        result = true;\n    }else{\n        result = false;\n    }\n    return result; \n}\n\nfunction BlankCreator(): Course{\n    const addedcourse: Course = {ID: nanoid(), School: \"\", ClassID: 0, CourseName: \"\", Desc: \"\", Credits: 0};\n    return addedcourse;\n}\n\nfunction BlankUpdater(acour: SidebarProp, addedcourse: Course): Course{\n    addedcourse.School = acour.School;\n    addedcourse.ClassID = acour.ClassID;\n    addedcourse.CourseName = acour.CourseName;\n    addedcourse.Desc = acour.Desc;\n    addedcourse.Credits = acour.Credits;\n    return addedcourse;\n}\n\nexport const DisplayDepartment = ({Department, plan, setPlan, currentSemesterID, setCurrentCourseID}: \n    {Department: string, plan : Semester[], setPlan: React.Dispatch<React.SetStateAction<Semester[]>>, currentSemesterID: string, setCurrentCourseID: React.Dispatch<React.SetStateAction<string>>}): JSX.Element => {\n    return(\n        <div>\n            { data.map ( (acour: SidebarProp) =>{ \n                return DepartmentChecker(acour, Department) === true ?\n                    <div className=\"card\" key = {acour.School + acour.ClassID + acour.CourseName}>\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <ul>\n                                    <li>{acour.School}{acour.ClassID}</li>\n                                    <li>{acour.CourseName}</li>\n                                    <li>{acour.Desc}</li>\n                                    <li>Credits: {acour.Credits}</li>\n                                </ul>\n                            </div>\n                            <div className=\"col-4\">\n                                <button className=\"add-class\" \n                                    onClick={(event: React.MouseEvent) => handleAddCourseClick(event, plan, setPlan, currentSemesterID, setCurrentCourseID, BlankUpdater(acour, BlankCreator()))}>\n                                </button>\n                            </div>  \n                        </div>\n                    </div>\n                    :\n                    null;\n            }\n            )}\n        </div>\n    );\n};","import React from \"react\";\nimport { Semester } from \"../interfaces/semester\";\nimport { Course } from \"../interfaces/course\";\n\nexport const handleAddCourseClick = (event: React.MouseEvent, plan: Semester[], setPlan: React.Dispatch<React.SetStateAction<Semester[]>>, \n    currentSemesterID: string, setCurrentCourseID: React.Dispatch<React.SetStateAction<string>>, addCourseData: Course): void => {\n    event.preventDefault();\n    const newPlan = plan.map(inner =>{ \n        return {...inner, Courses: [...inner.Courses]}; \n    });\n\n    const semIndex = plan.findIndex((semester: Semester) => semester.ID === currentSemesterID);\n    \n    const newCourse = {\n        ID: addCourseData.ID,\n        School: addCourseData.School,\n        ClassID: addCourseData.ClassID,\n        CourseName: addCourseData.CourseName,\n        Desc: addCourseData.Desc,\n        Credits: addCourseData.Credits\n    };\n\n    newPlan[semIndex].Courses.push(newCourse);\n    setPlan(newPlan);\n    setCurrentCourseID(\"\");\n};","import React, { useState } from \"react\";\nimport  Modal from \"react-modal\";\nimport { PlanViewer } from \"./components/PlanViewer\";\nimport { load } from \"./components/SaveAndLoad\";\nimport { WriteMessage, customModal} from \"./components/WelcomeMessage\";\nimport { Course } from \"./interfaces/course\";\nimport { Semester } from \"./interfaces/semester\";\nimport { DisplayDepartment } from \"./components/sidebar\";\nimport { ProSidebar, Menu, SidebarHeader, SidebarFooter, SidebarContent } from \"react-pro-sidebar\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\n/* Resources that assisted in the making of this:\n1. Basis of the semester table: https://youtu.be/dYjdzpZv5yc\n2. NanoID description: https://www.npmjs.com/package/nanoid\n3. Modal: https://www.npmjs.com/package/react-modal\n*/\n\nconst App = () : JSX.Element => {\n\n    //Hooks\n    const [plan, setPlan] = useState<Semester[]>(load());\n    const [currentSemesterID, setCurrentSemesterID]= useState(\"\");\n    const [currentCourseID, setCurrentCourseID] = useState(\"\");\n    const [modalOpen, setOpen] = useState(true); // For welcome message\n    const [semNum, setSemNum] = useState(2);\n    const [editCourseData, setEditCourseData] = useState<Course>\n    ({\n        ID: \"\",\n        School: \"\",\n        ClassID: 0,\n        CourseName: \"\",\n        Desc: \"\",\n        Credits: 0\n    });\n\n    //Display \n\n    return(\n        <div className = \"App\">\n            <Modal\n                isOpen={modalOpen}\n                onRequestClose={() => setOpen(false)}\n                contentLabel=\"Welcome Message\"\n                style={customModal}\n            >\n                <WriteMessage closeModal = {() => setOpen(false)} ></WriteMessage>\n            </Modal> \n            <div className = \"plan-display\">\n                <PlanViewer\n                    plan = {plan}\n                    setPlan = {setPlan}\n                    currentSemesterID = {currentSemesterID}\n                    setCurrentSemesterID = {setCurrentSemesterID}\n                    currentCourseID = {currentCourseID}\n                    setCurrentCourseID = {setCurrentCourseID}\n                    editCourseData = {editCourseData}\n                    setEditCourseData = {setEditCourseData}\n                    semNum ={semNum}\n                    setSemNum = {setSemNum}\n                />\n            </div>\n            <div className=\"col-4\">\n                <div className=\"full-column\">\n                    <ProSidebar className=\"sidebar\">\n                        <SidebarHeader className=\"sidebar-header\">\n                        COURSE LIST\n                        </SidebarHeader>\n                        <SidebarContent>\n                            <Menu iconShape=\"square\">\n                                <DisplayDepartment Department = {\"CISC\"} plan = {plan} \n                                    setPlan= {setPlan} currentSemesterID= {currentSemesterID} setCurrentCourseID={setCurrentCourseID}/>\n                                <DisplayDepartment Department = {\"MATH\"} plan = {plan} \n                                    setPlan= {setPlan} currentSemesterID= {currentSemesterID} setCurrentCourseID={setCurrentCourseID}/>\n                            </Menu>\n                        </SidebarContent>\n                        <SidebarFooter>\n                        </SidebarFooter>\n                    </ProSidebar>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}