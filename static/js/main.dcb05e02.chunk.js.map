{"version":3,"sources":["components/EditCourse.tsx","components/SaveAndLoad.tsx","components/AddCourse.tsx","components/ReadOnlyRow.tsx","components/MutableRow.tsx","components/WelcomeMessage.tsx","App.tsx","components/SemesterFunctions.tsx","reportWebVitals.ts","index.tsx"],"names":["handleEditCourseChange","event","editCourseData","setEditCourseData","preventDefault","fieldName","target","name","fieldValue","value","LOCAL_STORAGE_PLAN","INITIAL_PLAN","ID","SemesterName","Courses","handleAddCourseChange","addCourseData","setAddFormData","ReadOnlyRow","cour","setCurrentCourseID","handleEditClick","handleDeleteClick","onClick","School","ClassID","CourseName","Desc","Credits","className","type","MutableRow","handleCancelClick","required","placeholder","onChange","customModal","content","background","top","left","right","bottom","marginRight","transform","refreshPage","window","location","reload","WriteMessage","closeModal","App","useState","rawPlan","localStorage","getItem","JSON","parse","load","plan","setPlan","currentSemesterID","setCurrentSemesterID","currentCourseID","modalOpen","setOpen","semNum","setSemNum","newPlan","map","inner","semIndex","findIndex","semester","courIndex","course","splice","isOpen","onRequestClose","contentLabel","style","role","newSemester","nanoid","addSemester","length","clearSemesters","setItem","stringify","alert","save","Accordion","flush","sem","Item","eventKey","Header","Body","onSubmit","editedCourse","courseIndex","handleEditCourseSubmit","clearClasses","index","deleteSemester","newCourse","push","handleAddCourseSubmit","defaultValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dcb05e02.chunk.js","sourcesContent":["import React from \"react\";\nimport { Semester } from \"../interfaces/semester\";\nimport { Course } from \"../interfaces/course\";\n\nexport const handleEditCourseChange = (event: React.ChangeEvent<HTMLInputElement>, editCourseData: Course,\n    setEditCourseData: React.Dispatch<React.SetStateAction<Course>>): void => {\n    event.preventDefault();\n\n    const fieldName = event.target.name;\n    const fieldValue = event.target.value;\n\n    const newCourseData = {...editCourseData, [fieldName]: fieldValue};\n\n    setEditCourseData(newCourseData);\n};\n\nexport const handleEditClick = (event: React.MouseEvent, cour: Course, currentCourseID : string, \n    setCurrentCourseID: React.Dispatch<React.SetStateAction<string>>, setEditCourseData: React.Dispatch<React.SetStateAction<Course>>): void => {\n    event.preventDefault();\n\n    const courseValues = {\n        ID: currentCourseID,\n        School: cour.School,\n        ClassID: cour.ClassID,\n        CourseName: cour.CourseName,\n        Desc: cour.Desc,\n        Credits: cour.Credits\n    };\n\n    setEditCourseData(courseValues);\n    setCurrentCourseID(\"\");\n};\n\nexport const handleEditCourseSubmit = (event: React.FormEvent<HTMLFormElement>, currentSemesterID: string,\n    currentCourseID: string, plan: Semester[], setPlan: React.Dispatch<React.SetStateAction<Semester[]>>, \n    setCurrentCourseID: React.Dispatch<React.SetStateAction<string>>, editCourseData: Course): void => {\n    event.preventDefault();\n    const newPlan = plan.map(inner =>{ \n        return {...inner, Courses: [...inner.Courses]}; \n    });\n    const semIndex = plan.findIndex((semester: Semester) => semester.ID === currentSemesterID);\n\n    const editedCourse:Course = {\n        ID: currentCourseID,\n        School: editCourseData.School,\n        ClassID: editCourseData.ClassID,\n        CourseName: editCourseData.CourseName,\n        Desc: editCourseData.Desc,\n        Credits: editCourseData.Credits\n    };\n\n    const courseIndex = plan[semIndex].Courses.findIndex((course: Course)=> course.ID === currentCourseID);\n    newPlan[semIndex].Courses[courseIndex] = editedCourse;\n    setPlan(newPlan);\n    setCurrentCourseID(\"\");\n};\n\n","import { Semester } from \"../interfaces/semester\";\n\nexport const LOCAL_STORAGE_PLAN = \"fouryearplanner_plan\";\nexport const INITIAL_PLAN: Semester[] = [\n    { ID: \"0\", SemesterName: \"Semester 1\", Courses: [] }\n];\n\nexport function save(plan : Semester[]): void{ \n    localStorage.setItem(LOCAL_STORAGE_PLAN, JSON.stringify(plan));\n    alert(\"Plan saved! This plan will be loaded whenever you load back into this page.\");\n}\n\nexport function load() : Semester[] {\n    const rawPlan: string | null = localStorage.getItem(LOCAL_STORAGE_PLAN);\n    if (rawPlan === null) {\n        return [...INITIAL_PLAN];\n    } else {\n        return JSON.parse(rawPlan);\n    }\n}\n\nexport function clearSave(): void{\n    localStorage.setItem(LOCAL_STORAGE_PLAN, JSON.stringify(INITIAL_PLAN));\n    alert(\"Save cleared! Refresh your page to start again.\");\n}","import React from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { Semester } from \"../interfaces/semester\";\nimport { Course } from \"../interfaces/course\";\n\nexport const handleAddCourseChange = (event: React.ChangeEvent<HTMLInputElement>, \n    addCourseData : Course, setAddFormData: React.Dispatch<React.SetStateAction<Course>>): void =>  {\n    event.preventDefault();\n\n    const fieldName = event.target.name;\n    const fieldValue = event.target.value;\n    const newCourseData = { ...addCourseData, [fieldName]: fieldValue};\n\n    setAddFormData(newCourseData);\n};\n\nexport const handleAddCourseSubmit = (event: React.FormEvent<HTMLFormElement>, plan: Semester[], setPlan: React.Dispatch<React.SetStateAction<Semester[]>>, \n    currentSemesterID: string, setCurrentCourseID: React.Dispatch<React.SetStateAction<string>>, addCourseData: Course): void => {\n    event.preventDefault();\n    const newPlan = plan.map(inner =>{ \n        return {...inner, Courses: [...inner.Courses]}; \n    });\n\n    const semIndex = plan.findIndex((semester: Semester) => semester.ID === currentSemesterID);\n    \n    const newCourse = {\n        ID: nanoid(),\n        School: addCourseData.School,\n        ClassID: addCourseData.ClassID,\n        CourseName: addCourseData.CourseName,\n        Desc: addCourseData.Desc,\n        Credits: addCourseData.Credits\n    };\n\n    newPlan[semIndex].Courses.push(newCourse);\n    setPlan(newPlan);\n    setCurrentCourseID(\"\");\n};","import React from \"react\";\nimport { Course } from \"../interfaces/course\";\nimport \"../App.css\";\nimport \"../App.tsx\";\n\nconst ReadOnlyRow = ({ cour, setCurrentCourseID, handleEditClick, handleDeleteClick }:\n    {cour: Course , setCurrentCourseID: (value: React.SetStateAction<string>) => void, handleEditClick: (event: React.MouseEvent, cour: Course) => void, handleDeleteClick: (event: React.MouseEvent, cour: Course) => void}) : JSX.Element => {\n    return( \n        <tr key= {cour.ID} onClick= {() => setCurrentCourseID(cour.ID)}>\n            <td>{cour.School}</td>\n            <td>{cour.ClassID}</td>\n            <td>{cour.CourseName}</td>\n            <td>{cour.Desc}</td>\n            <td>{cour.Credits}</td>\n            <td>\n                <button className= \"edit-class\" type= \"button\" onClick={(event) => handleEditClick(event, cour)}></button>\n                <button className= \"delete-class\" type= \"button\" onClick={(event)=> handleDeleteClick(event, cour)}></button>\n            </td>\n        </tr> \n    );\n};\n\nexport default ReadOnlyRow;","import React from \"react\";\nimport { Course } from \"../interfaces/course\";\nimport \"../App.css\";\n\nconst MutableRow = ({editCourseData, handleEditCourseChange, handleCancelClick}: \n    {editCourseData: Course , handleEditCourseChange: (event: React.ChangeEvent<HTMLInputElement>) => void, handleCancelClick: () => void}) : JSX.Element => {\n    return (\n        <tr>\n            <td>\n                <input\n                    type= \"text\"\n                    required = {true}\n                    placeholder= \"Enter School\"\n                    name = \"School\"\n                    value = {editCourseData.School}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>                \n                <input\n                    type= \"number\"\n                    required = {true}\n                    placeholder= \"Enter Course ID\"\n                    name = \"ClassID\"\n                    value = {editCourseData.ClassID}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>\n                <input\n                    type= \"text\"\n                    required = {true}\n                    placeholder= \"Enter Course Name\"\n                    name = \"CourseName\"\n                    value = {editCourseData.CourseName}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>\n                <input\n                    type= \"text\"\n                    required = {true}\n                    placeholder= \"Enter Desc\"\n                    name = \"Desc\"\n                    value = {editCourseData.Desc}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>\n                <input\n                    type= \"number\"\n                    required = {true}\n                    placeholder= \"Enter Credit Amount\"\n                    name = \"Credits\"\n                    value = {editCourseData.Credits}\n                    onChange={handleEditCourseChange}\n                ></input>\n            </td>\n            <td>\n                <button className= \"save-class\" type= \"submit\"></button>\n                <button className= \"cancel-class\" type= \"button\" onClick={handleCancelClick}></button>\n            </td>\n        </tr>\n    );\n};\n\nexport default MutableRow;","import React from \"react\";\nimport \"../App.css\";\n\nexport const customModal = {\n    content: {\n        background: \"white\",\n        top: \"50%\",\n        left: \"50%\",\n        right: \"auto\",\n        bottom: \"auto\",\n        marginRight: \"-50%\",\n        transform: \"translate(-50%, -50%)\",\n    },\n};\n\nexport function refreshPage(): void{\n    window.location.reload();\n}\nexport const WriteMessage = ({closeModal}:{closeModal : () => void}): JSX.Element => {\n    return <div className=\"welcome-message\">\n        <h2 className= \"welcome-message-header\">Welcome to the UDEL Plan Creater!</h2>\n        <p className = \"welcome-message-body\">\n            This is where you can create your course plan for each semester of college.<br />\n            On this site you will be able to visualize your entire college career. <br />\n        </p>\n        <p>\n            Tutorial:\n            <ol>\n                <li>You start with a plan with just one empty semester.</li>\n                <li>You can choose to add semesters, clear all semesters from your plan, save plans, and clear your save state.</li>\n                <li>Once expanding a semester, you can add classes manually through the form at the below the accordion.</li>\n                <li>Once you have courses, you can edit or delete singular courses, clear all courses from your semester, or delete semesters.</li>\n                <li>Remember that everyones academic journey is unique. One size never fits all in college, dont get discouraged! Your plan is your path to your future, no matter how long or short it is.</li>\n            </ol>\n        </p>\n        <button className= \"modal-close\" onClick={closeModal}></button>\n    </div>;\n};","import React, { useState, Fragment } from \"react\";\nimport { Accordion } from \"react-bootstrap\";\nimport  Modal from \"react-modal\";\nimport { handleEditCourseChange, handleEditClick, handleEditCourseSubmit} from \"./components/EditCourse\";\nimport { save, load, clearSave } from \"./components/SaveAndLoad\";\nimport { addSemester, deleteSemester, clearSemesters, clearClasses } from \"./components/SemesterFunctions\";\nimport { handleAddCourseChange, handleAddCourseSubmit } from \"./components/AddCourse\";\nimport ReadOnlyRow from \"./components/ReadOnlyRow\";\nimport MutableRow from \"./components/MutableRow\";\nimport { WriteMessage, customModal, refreshPage } from \"./components/WelcomeMessage\";\nimport { Course } from \"./interfaces/course\";\nimport { Semester } from \"./interfaces/semester\";\n//import { ProSidebar, Menu, SidebarHeader, SidebarFooter, SidebarContent } from \"react-pro-sidebar\";\n//import { loadSidebar } from \"./components/sidebar\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\n/* Resources that assisted in the making of this:\n1. Basis of the semester table: https://youtu.be/dYjdzpZv5yc\n2. NanoID description: https://www.npmjs.com/package/nanoid\n3. Modal: https://www.npmjs.com/package/react-modal\n*/\n\nconst App = () : JSX.Element => {\n\n    //Hooks\n    const [plan, setPlan] = useState<Semester[]>(load());\n    const [currentSemesterID, setCurrentSemesterID]= useState(\"\");\n    const [currentCourseID, setCurrentCourseID] = useState(\"\");\n    const [modalOpen, setOpen] = useState(true); // For welcome message\n    const [semNum, setSemNum] = useState(2);\n    const [addCourseData, setAddFormData] = useState<Course>({\n        ID: \"someid\",\n        School: \"Department\",\n        ClassID: 0,\n        CourseName: \"Course Name\",\n        Desc: \"Some Description\",\n        Credits: 0\n    });\n    const [editCourseData, setEditCourseData] = useState<Course>\n    ({\n        ID: \"\",\n        School: \"\",\n        ClassID: 0,\n        CourseName: \"\",\n        Desc: \"\",\n        Credits: 0\n    });\n\n    //Functions\n\n    const handleDeleteClick = (event: React.MouseEvent, cour: Course) => {\n        event.preventDefault();\n        const newPlan = plan.map(inner =>{ \n            return {...inner, Courses: [...inner.Courses]}; \n        });\n        const semIndex = plan.findIndex(semester => semester.ID === currentSemesterID);\n        const courIndex = plan[semIndex].Courses.findIndex(course => course.ID === cour.ID);\n\n\n        newPlan[semIndex].Courses.splice(courIndex, 1);        \n        setPlan(newPlan);\n        setCurrentCourseID(\"\");\n    };\n    \n    const handleCancelClick = () => {\n        setCurrentCourseID(\"\");\n    };\n\n    //Display \n\n    return(\n        <div className = \"App\">\n            <Modal\n                isOpen={modalOpen}\n                onRequestClose={() => setOpen(false)}\n                contentLabel=\"Welcome Message\"\n                style={customModal}\n            >\n                <WriteMessage closeModal = {() => setOpen(false)} ></WriteMessage>\n            </Modal> \n\n            <div className = \"page-header\">\n                <h1 className=\"display-1\"> <button className=\"refresh-logo\" onClick={refreshPage}></button> UD CIS Scheduler</h1>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-8\">\n                    <br />\n                    <button role = \"add-semester\" className = \"edit-semester\" type = \"button\" \n                        onClick= {() => addSemester(plan, setPlan, semNum, setSemNum)}>Add Semester</button>\n                    <button role = \"clear-semesters\" className = \"edit-semester\" type = \"button\" \n                        onClick= {() => clearSemesters(plan, setPlan, setCurrentSemesterID, setSemNum)}>Clear All Semesters</button>\n                    <button role = \"save-plan\" className = \"edit-semester\" type = \"button\" \n                        onClick= {() => save(plan)}>Save Plan</button>\n                    <button role = \"clear-plan\" className = \"edit-semester\" type = \"button\" \n                        onClick= {() => clearSave()}>Clear Current Save state</button>\n                    <br />\n                </div>\n            </div>\n            <Accordion role= \"semester-display\" flush>\n                { plan.map ( (sem: Semester) =>\n                    <Accordion.Item eventKey= {sem.ID}  key = {sem.ID}>\n                        <Accordion.Header onClick= {() => setCurrentSemesterID(sem.ID)}>{sem.SemesterName}</Accordion.Header>\n                        <Accordion.Body>\n                            <form onSubmit={(event: React.FormEvent<HTMLFormElement>) => \n                                handleEditCourseSubmit(event, currentSemesterID, currentCourseID, \n                                    plan, setPlan, setCurrentCourseID, editCourseData)}>\n                                <table>\n                                    <thead>\n                                        <tr>\n                                            <th>School</th>\n                                            <th>ClassID</th>\n                                            <th>Course Name</th>\n                                            <th>Desc</th>\n                                            <th>Credits</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        { sem.Courses.map ( (cour: Course) =>\n                                            <Fragment key={cour.ID}>\n                                                { cour.ID === currentCourseID ? \n                                                    <MutableRow \n                                                        editCourseData = {editCourseData} \n                                                        handleEditCourseChange = {() => handleEditCourseChange}\n                                                        handleCancelClick = {handleCancelClick}\n                                                    /> \n                                                    :  \n                                                    <ReadOnlyRow \n                                                        cour = {cour}\n                                                        handleEditClick={(event: React.MouseEvent) => handleEditClick(event, cour, currentCourseID, setCurrentCourseID, setEditCourseData)}\n                                                        handleDeleteClick={handleDeleteClick}\n                                                        setCurrentCourseID={setCurrentCourseID}\n                                                    />\n                                                } \n                                            </Fragment>\n                                        )}\n                                    </tbody>\n                                </table>\n                                <button role= \"clear-classes\" className = \"edit-semester\" type = \"button\" \n                                    onClick= {() => clearClasses(plan, setPlan, currentSemesterID, setCurrentSemesterID)}>Clear Classes</button>\n                                <button role= \"delete-semester\" className = \"edit-semester\" type = \"button\" \n                                    onClick= {() => deleteSemester(plan, setPlan, currentSemesterID, setCurrentSemesterID, semNum, setSemNum)}>Delete Semester</button>\n                            </form>\n                        </Accordion.Body>\n                    </Accordion.Item>\n                )}\n            </Accordion>\n            <form role = \"add-course\" onSubmit={(event: React.FormEvent<HTMLFormElement>) => handleAddCourseSubmit(event, plan, setPlan, currentSemesterID, setCurrentCourseID, addCourseData)}>\n                <input \n                    type =\"text\"\n                    name = \"School\"\n                    defaultValue={addCourseData.School}\n                    required= {true}\n                    placeholder = \"Enter a School.\"\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => handleAddCourseChange(event, addCourseData, setAddFormData)}\n                />\n                <input \n                    type = \"number\"\n                    name = \"ClassID\"\n                    defaultValue={addCourseData.ClassID}\n                    required = {true}\n                    placeholder = \"Enter a Class ID.\"\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => handleAddCourseChange(event, addCourseData, setAddFormData)}\n                />\n                <input \n                    type =\"text\"\n                    name = \"CourseName\"\n                    defaultValue={addCourseData.CourseName}\n                    required = {true}\n                    placeholder = \"Enter a Course Name.\"\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => handleAddCourseChange(event, addCourseData, setAddFormData)}\n                />\n                <input \n                    type =\"text\"\n                    name = \"Desc\"\n                    defaultValue={addCourseData.Desc}\n                    required = {true}\n                    placeholder = \"Enter a Class Description.\"\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => handleAddCourseChange(event, addCourseData, setAddFormData)}\n                />\n                <input \n                    type =\"number\"\n                    name = \"Credits\"\n                    defaultValue={addCourseData.Credits}\n                    required = {true}\n                    placeholder = \"Enter a Credit Amount.\"\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => handleAddCourseChange(event, addCourseData, setAddFormData)}\n                />\n                <button type=\"submit\">Add Course</button>\n            </form>\n        </div>\n        \n    );\n};\n\nexport default App;","import { Semester } from \"../interfaces/semester\";\nimport { nanoid } from \"nanoid\";\n\n\nexport function addSemester(plan : Semester[], setPlan: React.Dispatch<React.SetStateAction<Semester[]>>, \n    semNum: number, setSemNum : React.Dispatch<React.SetStateAction<number>>): void{\n    const newSemester ={\n        ID: nanoid(),\n        SemesterName: \"Semester\" + semNum,\n        Courses: []\n    };\n\n    setSemNum(semNum + 1);\n    setPlan([...plan, newSemester]);\n}\n\nexport function deleteSemester(plan : Semester[], setPlan : React.Dispatch<React.SetStateAction<Semester[]>>,\n    currentSemesterID: string, setCurrentSemesterID: React.Dispatch<React.SetStateAction<string>>, \n    semNum: number, setSemNum : React.Dispatch<React.SetStateAction<number>>): void{\n    const newPlan = plan.map(inner =>{ \n        return {...inner}; \n    });\n    const index = plan.findIndex((semester: Semester) => semester.ID === currentSemesterID);\n\n    //Note for later, add something in here that updates the other semester number when this is called\n\n    newPlan.splice(index, 1);\n    setPlan(newPlan);\n    setCurrentSemesterID(\"\");\n    setSemNum(semNum-1);\n}\n\nexport function clearSemesters(plan : Semester[], setPlan: React.Dispatch<React.SetStateAction<Semester[]>>, \n    setCurrentSemesterID: React.Dispatch<React.SetStateAction<string>>, setSemNum : React.Dispatch<React.SetStateAction<number>> ): void{\n    const newPlan = plan.map(inner =>{ \n        return {...inner}; \n    });\n    newPlan.splice(0, newPlan.length);\n    \n    setPlan(newPlan);\n    setCurrentSemesterID(\"\");\n    setSemNum(1);\n}\n\nexport function clearClasses(plan : Semester[], setPlan : React.Dispatch<React.SetStateAction<Semester[]>>,\n    currentSemesterID: string, setCurrentCourseID: React.Dispatch<React.SetStateAction<string>>): void { // Clears all classes from a semester\n    const newPlan = plan.map(inner =>{ \n        return {...inner}; \n    });\n    const index = plan.findIndex((semester: Semester) => semester.ID === currentSemesterID);\n    \n    newPlan[index].Courses = [];\n    setPlan(newPlan);\n    setCurrentCourseID(\"\");\n}","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}